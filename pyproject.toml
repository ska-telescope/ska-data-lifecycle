[tool.poetry]
name = "ska_data_lifecycle"
version = "0.0.1"
description = "Services for managing the lifecycle of SKA data products"
authors = [
    "Andreas Wicenec <andreas.wicenec@icrar.org>",
    "James Strauss <james.strauss@icrar.org>",
    ]
repository = "https://gitlab.com/ska-telescope/sdp/ska-data-lifecycle"
documentation = "https://developer.skao.int/projects/ska-data-lifecycle/en/latest/"
license = "BSD-3-Clause"
readme = "README.md"
packages = [{include="ska_dlm", from="src"}]

[tool.poetry.scripts]
ska-dlm = "ska_dlm.cli:main"
ska-dlm-sm-service = "ska_dlm.dlm_storage.main:main"

[[tool.poetry.source]]
name = 'PyPI'
priority = 'primary'

[[tool.poetry.source]]
name = 'skao'
url = 'https://artefact.skao.int/repository/pypi-internal/simple'

[tool.poetry.dependencies]
python = "^3.10"
ska-ser-logging = "^0.4.1"
requests = "^2.32.3"
pyyaml = "^6.0.1"
python-benedict = "^0.33.2"
inflect = "^7.0.0"
ipython = "^8.20.0"
typer = "^0.12.5"
rich = "^13.0"
ska-sdp-metadata-generator = "^0.0.5"
fastapi = "^0.111.0"
overrides = "^7.7.0"
docstring-parser = "^0.16"

[tool.poetry.group.test.dependencies]
black = "^23.3.0"
flake8 = "^6.0.0"
isort = "^5.12.0"
pylint = "^3.2.6"
pylint-junit = "^0.3.2"
pytest = "^7.3.1"
pytest-cov = "^4.1.0"
pytest-integration = "^0.2.3"
darglint = "^1.8.1"
flake8-docstrings = "^1.7.0"
flake8-rst-docstrings = "^0.3.0"
flake8-pyproject = "^1.2.3"
ipykernel = "^6.29.2"
kubernetes = "^29.0.0"
docker = "^7.1.0"
python-keycloak = "^4.2.0"

[tool.poetry.group.docs.dependencies]
Sphinx = "^7.2.0"
ska-ser-sphinx-theme = "^0.1.1"
sphinx-autodoc-typehints = "^1.23.0"
m2r2 = "<0.3.3"

[tool.pytest.ini_options]
addopts = [
    "--integration-cover",
    "-v",
]
log_cli_level = "INFO"
log_cli_format = "1|%(asctime)s.%(msecs)03dZ|%(levelname)s|%(threadName)s|%(funcName)s|%(filename)s#%(lineno)d||%(message)s"
log_cli_date_format = "%Y-%m-%dT%H:%M:%S"
log_file = "pytest-logs.txt"
log_file_level = "INFO"
# log_cli = true

[tool.flake8]
docstring-style = "numpy"  # darglint
docstring-convention = "numpy"  # flake8-docstrings
strictness = "short"
rst-directives = "literalinclude"
ignore-decorator = "overrides"
rst-roles = [
    "py:attr",
    "py:class",
    "py:const",
    "py:exc",
    "py:func",
    "py:meth",
    "py:mod",
]
enable = "DAR104"
max-complexity = 10
exclude = [
    "tests/",
]
ignore = [
    # Use black to handle formatting
    "E203", # Whitespace before ':'
    "W503", # Line break occurred before a binary operator
    "E501", # line too long

    # pydocstyle
    # These hinder adoption of documentation
    "D401", # First line should be in imperative mood; try rephrasing

    # flake8 darglint and pydoclint
    "DOC103", "DAR103", # Parameter type mismatch
    "DOC201", "DAR201", # Missing "Returns" in Docstring
    "DOC301", "DAR301", # Missing "Yields" in Docstring
    "DOC401", "DAR401", # Missing "Exception" in Docstring
    "DOC501", "DAR501", # Missing "Raises" in Docstring
]

[tool.pylint.messages_control]
disable = ["duplicate-code", "fixme"]
enable = ["useless-suppression"]

[tool.pylint.similarities]
min-similarity-lines = 7
ignore-imports = "yes"

[build-system]
requires = ["poetry>=1.8.2"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 99
