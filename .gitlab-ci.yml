image: $SKA_K8S_TOOLS_DOCKER_BUILDER_IMAGE

variables:
  GIT_SUBMODULE_STRATEGY: recursive
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  # Ensure TEST_INGRESS is defined so that we don't try to evaluate `minikube ip` in the Makefile
  TEST_INGRESS: ""
  CI_POETRY_VERSION: 1.8.2

# Enable caching for python
cache:
  key: $CI_COMMIT_REF_SLUG
  paths:
    - .cache/pip

stages:
  - lint
  - build
  - pre-test
  - test
  - post-test
  - publish
  - pages
  - scan

# Include CI templates
include:
    # Python
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/python.gitlab-ci.yml'

    # Docs pages
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/docs.gitlab-ci.yml'

    # Tag Based GitLab Release Management
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/release.gitlab-ci.yml'

    # Build and push the docker image
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/oci-image.gitlab-ci.yml'

    # Build and push the Helm chart
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/helm-chart.gitlab-ci.yml'

    # .post step finalisers eg: badges
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/finaliser.gitlab-ci.yml'

.k8s-test:
  tags:
    - ska-k8s
  variables:
    CLUSTER_DOMAIN: techops.internal.skao.int
    KUBE_NAMESPACE: ci-$CI_PROJECT_NAME-$CI_PIPELINE_ID
    HELM_VALUES: resources/initialised-dlm.yaml resources/gitlab-cluster.yaml
  environment:
    name: test/$CI_COMMIT_REF_NAME
    kubernetes:
      namespace: $KUBE_NAMESPACE

python-test:
  rules:
    - when: never

k8s-test-setup:
  extends: .k8s-test
  stage: pre-test
  script:
    - make k8s-namespace
    - make update-chart-dependencies
    - make install-dlm
  environment:
    action: start

k8s-test:
  extends: .k8s-test
  stage: test
  before_script:
    - poetry self update $CI_POETRY_VERSION
    - poetry config virtualenvs.create $POETRY_CONFIG_VIRTUALENVS_CREATE
    - poetry install --with=test
  script:
    - make python-test
  environment:
    action: access

k8s-test-cleanup:
  extends: .k8s-test
  stage: post-test
  rules:
    - when: always
  script:
    - make k8s-delete-namespace
  environment:
    action: stop
