{{- $rbac_name := printf "%s-postgrest" .Release.Name -}}
apiVersion: v1
kind: Service
metadata:
  name: {{ include "ska-dlm.name" . }}-postgrest
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "ska-dlm.postgrest.labels" . | indent 4 }}
spec:
  type: ClusterIP
  ports:
    - name: tcp-postgrest
      port: 80
      targetPort: 3001
      protocol: TCP
  selector:
    component: {{ .Values.postgrest.component }}
    subsystem: {{ .Values.postgrest.subsystem }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "ska-dlm.name" . }}-postgrest
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "ska-dlm.postgrest.labels" . | indent 4 }}
spec:
  replicas: {{ .Values.postgrest.replicas }}
  selector:
    matchLabels:
      component: {{ .Values.postgrest.component }}
      subsystem: {{ .Values.postgrest.subsystem }}
  template:
    metadata:
      labels:
        {{- include "ska-dlm.postgrest.labels" . | indent 8 }}
    spec:
      {{- if .Values.postgresql.enabled }}
      initContainers:
      - name: wait-for-postgresql
        image: {{ .Values.kubectl.image }}:{{ .Values.kubectl.version }}
        imagePullPolicy: {{ .Values.kubectl.imagePullPolicy }}
        command:
        - kubectl
        - wait
        - pod
        - --for=condition=ready
        - {{ include "ska-dlm.postgresql.name" . }}-0
        - --timeout
        - 120s
      serviceAccountName: {{ $rbac_name }}
      {{- end }}
      containers:
      - name: postgrest
        image: {{ .Values.postgrest.image}}:{{ .Values.postgrest.version }}
        imagePullPolicy: {{ .Values.postgrest.imagePullPolicy }}
        readinessProbe:
          httpGet:
            path: /
            port: 3001
          initialDelaySeconds: 5
          periodSeconds: 5
        env:
          {{ $env := dict
            "PGRST_DB_URI" (include "ska-dlm.postgrest.postgresql.uri" .)
            "PGRST_SERVER_PORT" 3001
            "PGRST_DB_SCHEMA" .Values.postgrest.db_schema
            "PGRST_DB_ANON_ROLE" .Values.postgrest.db_anon_role
            "PGRST_DB_POOL" .Values.postgresql.db_pool
            "PGRST_SERVER_HOST" .Values.postgrest.server_host
            "PGRST_SECRET_IS_BASE64" .Values.postgrest.secret_is_base64
            "PGRST_MAX_ROWS" .Values.postgrest.max_rows
            "PGRST_PRE_REQUEST" .Values.postgrest.pre_request
            "PGRST_ROLE_CLAIM_KEY" .Values.postgrest.role_claim_key
          }}
          {{- range $envvar_name, $value := $env }}
          {{- if $value }}
          - name: {{ $envvar_name }}
            value: {{ $value | quote }}
          {{- end }}
          {{- end }}
{{- if .Values.postgresql.enabled }}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ $rbac_name }}
  namespace: {{ .Release.Namespace }}
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: {{ $rbac_name }}
  namespace: {{ .Release.Namespace }}
subjects:
- kind: ServiceAccount
  name: {{ $rbac_name }}
  namespace: {{ .Release.Namespace }}
roleRef:
  kind: Role
  name: {{ $rbac_name }}
  apiGroup: rbac.authorization.k8s.io
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: {{ $rbac_name }}
  namespace: {{ .Release.Namespace }}
rules:
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list", "watch"]
{{- end }}
