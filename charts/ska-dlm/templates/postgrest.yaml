{{- $rbac_name := printf "%s-postgrest" .Release.Name -}}
apiVersion: v1
kind: Service
metadata:
  name: {{ include "ska-dlm.fullname" . }}-postgrest
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "ska-dlm.postgrest.labels" . | indent 4 }}
spec:
  type: ClusterIP
  ports:
    - name: tcp-postgrest
      port: 80
      targetPort: 3001
      protocol: TCP
  selector:
    component: {{ .Values.postgrest.component }}
    subsystem: {{ .Values.postgrest.subsystem }}
{{ with .Values.postgrest.db_auth_secret -}}
{{- if .create -}}
{{- if .vault.enabled -}}
---
apiVersion: secrets.hashicorp.com/v1beta1
kind: VaultStaticSecret
metadata:
  namespace: {{ $.Release.Namespace }}
  name: {{ include "ska-dlm.postgrest.db-auth-secret-name" $ }}-vaultstaticsecret
spec:
  mount: {{ .vault.mount }}
  type: {{ .vault.type }}
  path: {{ .vault.path }}
  destination:
    create: true
    name: {{ include "ska-dlm.postgrest.db-auth-secret-name" $ }}
    transformation:
      excludeRaw: true
{{- else -}}
{{- if not $.Values.postgresql.enabled -}}
{{- fail (printf "No embedded PostgreSQL server enabled (postgresql.enabled=%s), can't generate DB authentication secret" ($.Values.postgresql.enabled | toString)) -}}
{{- else -}}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "ska-dlm.postgrest.db-auth-secret-name" $ }}
  namespace: {{ $.Release.Namespace }}
  labels:
    {{- include "ska-dlm.postgrest.labels" $ | indent 4 }}
type: Opaque
data:
  PGHOST: {{ include "ska-dlm.postgresql.name" $ | b64enc }}
  PGUSER: {{ $.Values.postgresql.auth.username | b64enc }}
  PGPASSWORD: {{ $.Values.postgresql.auth.password | b64enc }}
  PGDATABASE: {{ $.Values.postgresql.auth.database | b64enc }}
{{- end -}}
{{- end -}}
{{- end -}}
{{- end }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "ska-dlm.fullname" . }}-postgrest
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "ska-dlm.postgrest.labels" . | indent 4 }}
spec:
  replicas: {{ .Values.postgrest.replicas }}
  selector:
    matchLabels:
      component: {{ .Values.postgrest.component }}
      subsystem: {{ .Values.postgrest.subsystem }}
  template:
    metadata:
      labels:
        {{- include "ska-dlm.postgrest.labels" . | indent 8 }}
    spec:
      {{- if .Values.postgresql.enabled }}
      initContainers:
      - name: wait-for-postgresql
        image: {{ .Values.kubectl.image }}:{{ .Values.kubectl.version }}
        imagePullPolicy: {{ .Values.kubectl.imagePullPolicy }}
        command:
        - kubectl
        - wait
        - pod
        - --for=condition=ready
        - {{ include "ska-dlm.postgresql.name" . }}-0
        - --timeout
        - 120s
      serviceAccountName: {{ $rbac_name }}
      {{- end }}
      containers:
      - name: postgrest
        image: {{ .Values.postgrest.image}}:{{ .Values.postgrest.version }}
        imagePullPolicy: {{ .Values.postgrest.imagePullPolicy }}
        readinessProbe:
          httpGet:
            path: /
            port: 3001
          initialDelaySeconds: 5
          periodSeconds: 5
        env:
          {{/* DB connection parameters are first read from the secret, then put into PGRST_DB_URI */ -}}
          {{ range $envvar_name := tuple "PGUSER" "PGPASSWORD" "PGHOST" "PGDATABASE" -}}
          - name: {{ $envvar_name }}
            valueFrom:
              secretKeyRef:
                name: {{ include "ska-dlm.postgrest.db-auth-secret-name" $ }}
                key: {{ $envvar_name }}
                optional: false
          {{ end -}}
          - name: PGRST_DB_URI
            value: "postgres://$(PGUSER):$(PGPASSWORD)@$(PGHOST)/$(PGDATABASE)"

          {{- /* The rest of the configuration is always taken from the given Helm values */ -}}
          {{ $env := dict
            "PGRST_SERVER_PORT" 3001
            "PGRST_DB_ANON_ROLE" .Values.postgrest.db_anon_role
            "PGRST_DB_POOL" .Values.postgresql.db_pool
            "PGRST_SERVER_HOST" .Values.postgrest.server_host
            "PGRST_SECRET_IS_BASE64" .Values.postgrest.secret_is_base64
            "PGRST_MAX_ROWS" .Values.postgrest.max_rows
            "PGRST_PRE_REQUEST" .Values.postgrest.pre_request
            "PGRST_ROLE_CLAIM_KEY" .Values.postgrest.role_claim_key
            "PGRST_DB_SCHEMA" .Values.postgrest.db_schema
            "PGRST_LOG_LEVEL" .Values.postgrest.log_level
          }}
          {{- range $envvar_name, $value := $env }}
          {{- if $value }}
          - name: {{ $envvar_name }}
            value: {{ $value | quote }}
          {{- end }}
          {{- end }}
{{- if .Values.postgresql.enabled }}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ $rbac_name }}
  namespace: {{ .Release.Namespace }}
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: {{ $rbac_name }}
  namespace: {{ .Release.Namespace }}
subjects:
- kind: ServiceAccount
  name: {{ $rbac_name }}
  namespace: {{ .Release.Namespace }}
roleRef:
  kind: Role
  name: {{ $rbac_name }}
  apiGroup: rbac.authorization.k8s.io
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: {{ $rbac_name }}
  namespace: {{ .Release.Namespace }}
rules:
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list", "watch"]
{{- end }}
