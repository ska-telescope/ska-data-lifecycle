{{- if not .Values.postgresql.enabled }}

{{- if and .Values.database.migration.enabled .Values.database.migration.base.baseInstall }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "ska-dlm.fullname" . }}-base-migration
spec:
  template:
    spec:
      containers:
      - name: base-migration
        image: {{ .Values.database.migration.image }}:{{ .Values.database.migration.version }}
        command: ["/bin/sh", "-c"]
        args:
          - |
            echo "Waiting for Postgres to be ready...";
            attempts=0
            max_attempts=30
            until pg_isready -h "$PGHOST" -p "$PGPORT" -U "$PGUSER" -d "$PGDATABASE"; do
              attempts=$((attempts + 1))
              if [ "$attempts" -ge "$max_attempts" ]; then
                echo "Postgres not ready after $((max_attempts * 2)) seconds, exiting."
                exit 1
              fi
              sleep 2;
            done;

            for f in /etc/sql/base/*.sql; do
              echo "Running $f";
              psql -f "$f";
            done
        env:
        {{- range $envvar_name := tuple "PGUSER" "PGPASSWORD" "PGHOST" "PGDATABASE" }}
        - name: {{ $envvar_name }}
          valueFrom:
            secretKeyRef:
              name: {{ include "ska-dlm.postgrest.db-auth-secret-name" $ }}
              key: {{ $envvar_name }}
        {{- end }}
        - name: PGPORT
          valueFrom:
            secretKeyRef:
              name: {{ include "ska-dlm.postgrest.db-auth-secret-name" $ }}
              key: PGPORT
              optional: true
        volumeMounts:
        - name: base-volume
          mountPath: /etc/sql/base/
      volumes:
      - name: base-volume
        configMap:
          name: ska-dlm-postgresql-initdb-base-scripts
      restartPolicy: Never
  backoffLimit: 4
{{- end }}

---

{{- if and .Values.database.migration.enabled .Values.database.migration.patch.patchInstall }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "ska-dlm.fullname" . }}-patch-migration
spec:
  template:
    spec:
      containers:
      - name: patch-migration
        image: {{ .Values.database.migration.image }}:{{ .Values.database.migration.version }}
        command: ["/bin/sh", "-c"]
        args:
          - |
            echo "Waiting for Postgres to be ready...";
            attempts=0
            max_attempts=30
            until pg_isready -h "$PGHOST" -p "$PGPORT" -U "$PGUSER" -d "$PGDATABASE"; do
              attempts=$((attempts + 1))
              if [ "$attempts" -ge "$max_attempts" ]; then
                echo "Postgres not ready after $((max_attempts * 2)) seconds, exiting."
                exit 1
              fi
              sleep 2;
            done;

            if [ "$BASE_INSTALL_ENABLED" = "true" ]; then
              echo "Waiting for base schema (e.g., data_item table) to be present...";
              until psql -qtAX -c "SELECT to_regclass('public.data_item');" | grep -q 'data_item'; do
                echo "data_item table not found yet. Retrying...";
                sleep 2;
              done;
            fi

            echo "Looking for patch files in /etc/sql/patch/";
            if ls /etc/sql/patch/*.sql 1> /dev/null 2>&1; then
              for f in /etc/sql/patch/*.sql; do
                echo "Running $f";
                psql -v ON_ERROR_STOP=1 -f "$f";
              done;
            else
              echo "No patch files found";
            fi
        env:
        {{- range $envvar_name := tuple "PGUSER" "PGPASSWORD" "PGHOST" "PGDATABASE" }}
        - name: {{ $envvar_name }}
          valueFrom:
            secretKeyRef:
              name: {{ include "ska-dlm.postgrest.db-auth-secret-name" $ }}
              key: {{ $envvar_name }}
        {{- end }}
        - name: PGPORT
          valueFrom:
            secretKeyRef:
              name: {{ include "ska-dlm.postgrest.db-auth-secret-name" $ }}
              key: PGPORT
              optional: true
        - name: BASE_INSTALL_ENABLED
          value: {{ .Values.database.migration.base.baseInstall | default false | quote }}
        volumeMounts:
        - name: patch-volume
          mountPath: /etc/sql/patch/
      volumes:
      - name: patch-volume
        configMap:
          name: ska-dlm-db-patch-scripts
      restartPolicy: Never
  backoffLimit: 4
{{- end }}

{{- end }}
